class Solution:
    def unboundedKnapsack(self,wts,val,N,W):
        dp={}
        def func(n,W):
            if n==0:
                return 0
            elif (n,W) in dp:
                return dp[(n,W)]
            else:
                item=wts[n-1]
                if item<=W:
                    option1=val[n-1]+func(n,W-item)
                    option2=func(n-1,W)
                    dp[(n,W)]= max(option1,option2)
                else:
                    dp[(n,W)]=func(n-1,W)
            return dp[(n,W)]
        return func(N,W)

c=Solution()
N=4
W=8
val=[1,4,5,7]
wts=[1,3,4,5]
print(c.unboundedKnapsack(wts,val,N,W))
