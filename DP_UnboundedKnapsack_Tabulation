class Solution:
    def unboundedKnapsack(self,wts,val,N,W):
        dp=[[0]*(W+1) for _ in range(N)]
        def func(n,W):
            for i in range(n):
                for j in range(W+1):
                    item=wts[i]
                    if item<=j:
                        take=val[i]+dp[i][j-item]
                        noTake=dp[i-1][j]
                        dp[i][j]=max(take,noTake)
                    else:
                        dp[i][j]=dp[i-1][j]
            return dp[n-1][W]
        return func(N,W)

c=Solution()
N=4
W=8
val=[1,4,5,7]
wts=[1,3,4,5]
print(c.unboundedKnapsack(wts,val,N,W))
